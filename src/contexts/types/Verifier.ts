/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type DecryptProofStruct = {
  a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  inputs: PromiseOrValue<BigNumberish>[];
};

export type DecryptProofStructOutput = [
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber],
  BigNumber[]
] & {
  a: [BigNumber, BigNumber];
  b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  c: [BigNumber, BigNumber];
  inputs: BigNumber[];
};

export type ShuffleProofStruct = {
  a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  inputs: PromiseOrValue<BigNumberish>[];
};

export type ShuffleProofStructOutput = [
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber],
  BigNumber[]
] & {
  a: [BigNumber, BigNumber];
  b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  c: [BigNumber, BigNumber];
  inputs: BigNumber[];
};

export interface VerifierInterface extends utils.Interface {
  functions: {
    "INVALID_INDEX()": FunctionFragment;
    "batchSearchDeck(uint256[],uint256)": FunctionFragment;
    "boardManager()": FunctionFragment;
    "decrypt_verifier()": FunctionFragment;
    "encrypt_verifier()": FunctionFragment;
    "getDecryptCounts(uint256[],uint256)": FunctionFragment;
    "getDecryptProof(uint256,uint256)": FunctionFragment;
    "getDecryptProofs(uint256[],uint256)": FunctionFragment;
    "getShuffleCount(uint256)": FunctionFragment;
    "getShuffleProof(uint256)": FunctionFragment;
    "getShuffleProofByIndex(uint256,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "searchDeck(uint256,uint256)": FunctionFragment;
    "setBoardManager(address)": FunctionFragment;
    "shuffleCounts(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifyDecryptAndSave(uint256,(uint256[2],uint256[2][2],uint256[2],uint256[8]),uint256)": FunctionFragment;
    "verifyShuffleAndSave((uint256[2],uint256[2][2],uint256[2],uint256[215]),uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "INVALID_INDEX"
      | "batchSearchDeck"
      | "boardManager"
      | "decrypt_verifier"
      | "encrypt_verifier"
      | "getDecryptCounts"
      | "getDecryptProof"
      | "getDecryptProofs"
      | "getShuffleCount"
      | "getShuffleProof"
      | "getShuffleProofByIndex"
      | "owner"
      | "renounceOwnership"
      | "searchDeck"
      | "setBoardManager"
      | "shuffleCounts"
      | "transferOwnership"
      | "verifyDecryptAndSave"
      | "verifyShuffleAndSave"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "INVALID_INDEX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "batchSearchDeck",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "decrypt_verifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "encrypt_verifier",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptCounts",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptProof",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getDecryptProofs",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShuffleCount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShuffleProof",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getShuffleProofByIndex",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "searchDeck",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBoardManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleCounts",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyDecryptAndSave",
    values: [
      PromiseOrValue<BigNumberish>,
      DecryptProofStruct,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyShuffleAndSave",
    values: [ShuffleProofStruct, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "INVALID_INDEX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchSearchDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "boardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "decrypt_verifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "encrypt_verifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDecryptProofs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShuffleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShuffleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getShuffleProofByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "searchDeck", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBoardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shuffleCounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyDecryptAndSave",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyShuffleAndSave",
    data: BytesLike
  ): Result;

  events: {
    "BoardManagerSet(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BoardManagerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface BoardManagerSetEventObject {
  manager: string;
}
export type BoardManagerSetEvent = TypedEvent<
  [string],
  BoardManagerSetEventObject
>;

export type BoardManagerSetEventFilter = TypedEventFilter<BoardManagerSetEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface Verifier extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VerifierInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<[BigNumber]>;

    batchSearchDeck(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { cards: BigNumber[] }>;

    boardManager(overrides?: CallOverrides): Promise<[string]>;

    decrypt_verifier(overrides?: CallOverrides): Promise<[string]>;

    encrypt_verifier(overrides?: CallOverrides): Promise<[string]>;

    getDecryptCounts(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { counts: BigNumber[] }>;

    getDecryptProof(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DecryptProofStructOutput]>;

    getDecryptProofs(
      indexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DecryptProofStructOutput[]]>;

    getShuffleCount(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getShuffleProof(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ShuffleProofStructOutput]>;

    getShuffleProofByIndex(
      i: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[ShuffleProofStructOutput]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    searchDeck(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setBoardManager(
      boardManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shuffleCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyDecryptAndSave(
      cardIndex: PromiseOrValue<BigNumberish>,
      proof: DecryptProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifyShuffleAndSave(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

  batchSearchDeck(
    cardIndexes: PromiseOrValue<BigNumberish>[],
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  boardManager(overrides?: CallOverrides): Promise<string>;

  decrypt_verifier(overrides?: CallOverrides): Promise<string>;

  encrypt_verifier(overrides?: CallOverrides): Promise<string>;

  getDecryptCounts(
    cardIndexes: PromiseOrValue<BigNumberish>[],
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getDecryptProof(
    cardIndex: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DecryptProofStructOutput>;

  getDecryptProofs(
    indexes: PromiseOrValue<BigNumberish>[],
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DecryptProofStructOutput[]>;

  getShuffleCount(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getShuffleProof(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ShuffleProofStructOutput>;

  getShuffleProofByIndex(
    i: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<ShuffleProofStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  searchDeck(
    cardIndex: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setBoardManager(
    boardManager_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shuffleCounts(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyDecryptAndSave(
    cardIndex: PromiseOrValue<BigNumberish>,
    proof: DecryptProofStruct,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifyShuffleAndSave(
    proof: ShuffleProofStruct,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    batchSearchDeck(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    boardManager(overrides?: CallOverrides): Promise<string>;

    decrypt_verifier(overrides?: CallOverrides): Promise<string>;

    encrypt_verifier(overrides?: CallOverrides): Promise<string>;

    getDecryptCounts(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getDecryptProof(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DecryptProofStructOutput>;

    getDecryptProofs(
      indexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DecryptProofStructOutput[]>;

    getShuffleCount(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShuffleProof(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ShuffleProofStructOutput>;

    getShuffleProofByIndex(
      i: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<ShuffleProofStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    searchDeck(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBoardManager(
      boardManager_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shuffleCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyDecryptAndSave(
      cardIndex: PromiseOrValue<BigNumberish>,
      proof: DecryptProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyShuffleAndSave(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "BoardManagerSet(address)"(
      manager?: PromiseOrValue<string> | null
    ): BoardManagerSetEventFilter;
    BoardManagerSet(
      manager?: PromiseOrValue<string> | null
    ): BoardManagerSetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<BigNumber>;

    batchSearchDeck(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    boardManager(overrides?: CallOverrides): Promise<BigNumber>;

    decrypt_verifier(overrides?: CallOverrides): Promise<BigNumber>;

    encrypt_verifier(overrides?: CallOverrides): Promise<BigNumber>;

    getDecryptCounts(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecryptProof(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDecryptProofs(
      indexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShuffleCount(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShuffleProof(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getShuffleProofByIndex(
      i: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    searchDeck(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setBoardManager(
      boardManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shuffleCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyDecryptAndSave(
      cardIndex: PromiseOrValue<BigNumberish>,
      proof: DecryptProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifyShuffleAndSave(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    INVALID_INDEX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    batchSearchDeck(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    boardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decrypt_verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    encrypt_verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getDecryptCounts(
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecryptProof(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDecryptProofs(
      indexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShuffleCount(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShuffleProof(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getShuffleProofByIndex(
      i: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    searchDeck(
      cardIndex: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setBoardManager(
      boardManager_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shuffleCounts(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyDecryptAndSave(
      cardIndex: PromiseOrValue<BigNumberish>,
      proof: DecryptProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifyShuffleAndSave(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
