/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export type BoardStruct = {
  stage: PromiseOrValue<BigNumberish>;
  playerAddresses: PromiseOrValue<string>[];
  playerHands: PromiseOrValue<BigNumberish>[][];
  playerBets: PromiseOrValue<BigNumberish>[];
  playerChips: PromiseOrValue<BigNumberish>[];
  playerBetsEachRound: PromiseOrValue<BigNumberish>[][];
  playerInPots: PromiseOrValue<boolean>[];
  communityCards: PromiseOrValue<BigNumberish>[];
  nextPlayerToPlay: PromiseOrValue<BigNumberish>;
  dealerIndex: PromiseOrValue<BigNumberish>;
  bigBlindSize: PromiseOrValue<BigNumberish>;
  previousRaise: PromiseOrValue<BigNumberish>;
  winner: PromiseOrValue<string>;
  requiredPlayers: PromiseOrValue<BigNumberish>;
  potSize: PromiseOrValue<BigNumberish>;
  pks: PromiseOrValue<BigNumberish>[][];
};

export type BoardStructOutput = [
  number,
  string[],
  BigNumber[][],
  BigNumber[],
  BigNumber[],
  BigNumber[][],
  boolean[],
  BigNumber[],
  BigNumber,
  BigNumber,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  BigNumber[][]
] & {
  stage: number;
  playerAddresses: string[];
  playerHands: BigNumber[][];
  playerBets: BigNumber[];
  playerChips: BigNumber[];
  playerBetsEachRound: BigNumber[][];
  playerInPots: boolean[];
  communityCards: BigNumber[];
  nextPlayerToPlay: BigNumber;
  dealerIndex: BigNumber;
  bigBlindSize: BigNumber;
  previousRaise: BigNumber;
  winner: string;
  requiredPlayers: BigNumber;
  potSize: BigNumber;
  pks: BigNumber[][];
};

export type DecryptProofStruct = {
  a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  inputs: PromiseOrValue<BigNumberish>[];
};

export type DecryptProofStructOutput = [
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber],
  BigNumber[]
] & {
  a: [BigNumber, BigNumber];
  b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  c: [BigNumber, BigNumber];
  inputs: BigNumber[];
};

export type ShuffleProofStruct = {
  a: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  b: [
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>],
    [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ];
  c: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>];
  inputs: PromiseOrValue<BigNumberish>[];
};

export type ShuffleProofStructOutput = [
  [BigNumber, BigNumber],
  [[BigNumber, BigNumber], [BigNumber, BigNumber]],
  [BigNumber, BigNumber],
  BigNumber[]
] & {
  a: [BigNumber, BigNumber];
  b: [[BigNumber, BigNumber], [BigNumber, BigNumber]];
  c: [BigNumber, BigNumber];
  inputs: BigNumber[];
};

export interface BoardManagerInterface extends utils.Interface {
  functions: {
    "MIN_BIG_BLIND_SIZE()": FunctionFragment;
    "MIN_PLAYERS()": FunctionFragment;
    "amountToCall(address,uint256)": FunctionFragment;
    "amountToRaise(address,uint256)": FunctionFragment;
    "announceWinner(uint256)": FunctionFragment;
    "boards(uint256)": FunctionFragment;
    "call(uint256,uint256)": FunctionFragment;
    "canCall(address,uint256,uint256)": FunctionFragment;
    "canCheck(address,uint256)": FunctionFragment;
    "canFold(address,uint256)": FunctionFragment;
    "canRaise(address,uint256,uint256)": FunctionFragment;
    "check(uint256)": FunctionFragment;
    "createBoard(uint256,uint256,uint256)": FunctionFragment;
    "fold(uint256)": FunctionFragment;
    "getBoard(uint256)": FunctionFragment;
    "globalPaused()": FunctionFragment;
    "highestBet(uint256)": FunctionFragment;
    "isBetRound(uint256)": FunctionFragment;
    "isRevealRound(uint256)": FunctionFragment;
    "joinBoardWithPublicKey(uint256[],uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerInfos(address)": FunctionFragment;
    "pokerEvaluator()": FunctionFragment;
    "provideDecryptProof((uint256[2],uint256[2][2],uint256[2],uint256[8])[],uint256[],uint256)": FunctionFragment;
    "raise(uint256,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "requestChip(uint256)": FunctionFragment;
    "setEvaluator(address)": FunctionFragment;
    "setVerifier(address)": FunctionFragment;
    "shuffleDeck((uint256[2],uint256[2][2],uint256[2],uint256[215]),uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "verifier()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MIN_BIG_BLIND_SIZE"
      | "MIN_PLAYERS"
      | "amountToCall"
      | "amountToRaise"
      | "announceWinner"
      | "boards"
      | "call"
      | "canCall"
      | "canCheck"
      | "canFold"
      | "canRaise"
      | "check"
      | "createBoard"
      | "fold"
      | "getBoard"
      | "globalPaused"
      | "highestBet"
      | "isBetRound"
      | "isRevealRound"
      | "joinBoardWithPublicKey"
      | "owner"
      | "playerInfos"
      | "pokerEvaluator"
      | "provideDecryptProof"
      | "raise"
      | "renounceOwnership"
      | "requestChip"
      | "setEvaluator"
      | "setVerifier"
      | "shuffleDeck"
      | "transferOwnership"
      | "verifier"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MIN_BIG_BLIND_SIZE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_PLAYERS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "amountToCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "amountToRaise",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "announceWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "boards",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "canCheck",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canFold",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "canRaise",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "check",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createBoard",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getBoard",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "globalPaused",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBet",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBetRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isRevealRound",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBoardWithPublicKey",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerInfos",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pokerEvaluator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "provideDecryptProof",
    values: [
      DecryptProofStruct[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "raise",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestChip",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEvaluator",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVerifier",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "shuffleDeck",
    values: [ShuffleProofStruct, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "verifier", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "MIN_BIG_BLIND_SIZE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_PLAYERS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "amountToRaise",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "announceWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "boards", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canCheck", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canFold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canRaise", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createBoard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBoard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "globalPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "highestBet", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBetRound", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isRevealRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinBoardWithPublicKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerInfos",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pokerEvaluator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "provideDecryptProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "raise", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestChip",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEvaluator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVerifier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "shuffleDeck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verifier", data: BytesLike): Result;

  events: {
    "BatchDecryptProofProvided(address,uint256,uint256)": EventFragment;
    "Bet(address,uint256,uint256,uint256)": EventFragment;
    "BoardCreated(address,uint256)": EventFragment;
    "ChipRequested(address,uint256)": EventFragment;
    "DeckShuffled(address,uint256)": EventFragment;
    "DecryptProofProvided(address,uint256,uint256)": EventFragment;
    "EvaluatorSet(address)": EventFragment;
    "GameStageChanged(uint8,uint256)": EventFragment;
    "JoinedBoard(address,uint256)": EventFragment;
    "NextPlayer(uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "VerifierSet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BatchDecryptProofProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BoardCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChipRequested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DeckShuffled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DecryptProofProvided"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EvaluatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameStageChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinedBoard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NextPlayer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VerifierSet"): EventFragment;
}

export interface BatchDecryptProofProvidedEventObject {
  sender: string;
  cardCount: BigNumber;
  boardId: BigNumber;
}
export type BatchDecryptProofProvidedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  BatchDecryptProofProvidedEventObject
>;

export type BatchDecryptProofProvidedEventFilter =
  TypedEventFilter<BatchDecryptProofProvidedEvent>;

export interface BetEventObject {
  player: string;
  amount: BigNumber;
  betType: BigNumber;
  boardId: BigNumber;
}
export type BetEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  BetEventObject
>;

export type BetEventFilter = TypedEventFilter<BetEvent>;

export interface BoardCreatedEventObject {
  creator: string;
  boardId: BigNumber;
}
export type BoardCreatedEvent = TypedEvent<
  [string, BigNumber],
  BoardCreatedEventObject
>;

export type BoardCreatedEventFilter = TypedEventFilter<BoardCreatedEvent>;

export interface ChipRequestedEventObject {
  requester: string;
  boardId: BigNumber;
}
export type ChipRequestedEvent = TypedEvent<
  [string, BigNumber],
  ChipRequestedEventObject
>;

export type ChipRequestedEventFilter = TypedEventFilter<ChipRequestedEvent>;

export interface DeckShuffledEventObject {
  player: string;
  boardId: BigNumber;
}
export type DeckShuffledEvent = TypedEvent<
  [string, BigNumber],
  DeckShuffledEventObject
>;

export type DeckShuffledEventFilter = TypedEventFilter<DeckShuffledEvent>;

export interface DecryptProofProvidedEventObject {
  sender: string;
  cardIndex: BigNumber;
  boardId: BigNumber;
}
export type DecryptProofProvidedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DecryptProofProvidedEventObject
>;

export type DecryptProofProvidedEventFilter =
  TypedEventFilter<DecryptProofProvidedEvent>;

export interface EvaluatorSetEventObject {
  evaluator: string;
}
export type EvaluatorSetEvent = TypedEvent<[string], EvaluatorSetEventObject>;

export type EvaluatorSetEventFilter = TypedEventFilter<EvaluatorSetEvent>;

export interface GameStageChangedEventObject {
  stage: number;
  boardId: BigNumber;
}
export type GameStageChangedEvent = TypedEvent<
  [number, BigNumber],
  GameStageChangedEventObject
>;

export type GameStageChangedEventFilter =
  TypedEventFilter<GameStageChangedEvent>;

export interface JoinedBoardEventObject {
  player: string;
  boardId: BigNumber;
}
export type JoinedBoardEvent = TypedEvent<
  [string, BigNumber],
  JoinedBoardEventObject
>;

export type JoinedBoardEventFilter = TypedEventFilter<JoinedBoardEvent>;

export interface NextPlayerEventObject {
  playerIndex: BigNumber;
  boardId: BigNumber;
}
export type NextPlayerEvent = TypedEvent<
  [BigNumber, BigNumber],
  NextPlayerEventObject
>;

export type NextPlayerEventFilter = TypedEventFilter<NextPlayerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VerifierSetEventObject {
  verifier: string;
}
export type VerifierSetEvent = TypedEvent<[string], VerifierSetEventObject>;

export type VerifierSetEventFilter = TypedEventFilter<VerifierSetEvent>;

export interface BoardManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BoardManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MIN_BIG_BLIND_SIZE(overrides?: CallOverrides): Promise<[BigNumber]>;

    MIN_PLAYERS(overrides?: CallOverrides): Promise<[BigNumber]>;

    amountToCall(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    amountToRaise(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    announceWinner(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    boards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        stage: number;
        nextPlayerToPlay: BigNumber;
        dealerIndex: BigNumber;
        bigBlindSize: BigNumber;
        previousRaise: BigNumber;
        winner: string;
        requiredPlayers: BigNumber;
        potSize: BigNumber;
      }
    >;

    call(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    canCall(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canCheck(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canFold(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    canRaise(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    check(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createBoard(
      requiredPlayers: PromiseOrValue<BigNumberish>,
      bigBlindSize: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fold(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBoard(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BoardStructOutput]>;

    globalPaused(overrides?: CallOverrides): Promise<[boolean]>;

    highestBet(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { bet: BigNumber }>;

    isBetRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isRevealRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joinBoardWithPublicKey(
      pk: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        chips: BigNumber;
        currentJoinedBoardId: BigNumber;
      }
    >;

    pokerEvaluator(overrides?: CallOverrides): Promise<[string]>;

    provideDecryptProof(
      proofs: DecryptProofStruct[],
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raise(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    requestChip(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEvaluator(
      pokerEvaluator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    shuffleDeck(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    verifier(overrides?: CallOverrides): Promise<[string]>;
  };

  MIN_BIG_BLIND_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

  MIN_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

  amountToCall(
    player: PromiseOrValue<string>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  amountToRaise(
    player: PromiseOrValue<string>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  announceWinner(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  boards(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      BigNumber,
      BigNumber
    ] & {
      stage: number;
      nextPlayerToPlay: BigNumber;
      dealerIndex: BigNumber;
      bigBlindSize: BigNumber;
      previousRaise: BigNumber;
      winner: string;
      requiredPlayers: BigNumber;
      potSize: BigNumber;
    }
  >;

  call(
    amount: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  canCall(
    player: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canCheck(
    player: PromiseOrValue<string>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canFold(
    player: PromiseOrValue<string>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  canRaise(
    player: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  check(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createBoard(
    requiredPlayers: PromiseOrValue<BigNumberish>,
    bigBlindSize: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fold(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBoard(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BoardStructOutput>;

  globalPaused(overrides?: CallOverrides): Promise<boolean>;

  highestBet(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isBetRound(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isRevealRound(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joinBoardWithPublicKey(
    pk: PromiseOrValue<BigNumberish>[],
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerInfos(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      chips: BigNumber;
      currentJoinedBoardId: BigNumber;
    }
  >;

  pokerEvaluator(overrides?: CallOverrides): Promise<string>;

  provideDecryptProof(
    proofs: DecryptProofStruct[],
    cardIndexes: PromiseOrValue<BigNumberish>[],
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raise(
    amount: PromiseOrValue<BigNumberish>,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  requestChip(
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEvaluator(
    pokerEvaluator_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVerifier(
    verifier_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  shuffleDeck(
    proof: ShuffleProofStruct,
    boardId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  verifier(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MIN_BIG_BLIND_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    amountToCall(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountToRaise(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    announceWinner(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        winner: string;
        highestScore: BigNumber;
        winnerIndex: BigNumber;
      }
    >;

    boards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber
      ] & {
        stage: number;
        nextPlayerToPlay: BigNumber;
        dealerIndex: BigNumber;
        bigBlindSize: BigNumber;
        previousRaise: BigNumber;
        winner: string;
        requiredPlayers: BigNumber;
        potSize: BigNumber;
      }
    >;

    call(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    canCall(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canCheck(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canFold(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    canRaise(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    check(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createBoard(
      requiredPlayers: PromiseOrValue<BigNumberish>,
      bigBlindSize: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fold(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBoard(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BoardStructOutput>;

    globalPaused(overrides?: CallOverrides): Promise<boolean>;

    highestBet(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBetRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isRevealRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joinBoardWithPublicKey(
      pk: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        chips: BigNumber;
        currentJoinedBoardId: BigNumber;
      }
    >;

    pokerEvaluator(overrides?: CallOverrides): Promise<string>;

    provideDecryptProof(
      proofs: DecryptProofStruct[],
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    raise(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    requestChip(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEvaluator(
      pokerEvaluator_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    shuffleDeck(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    verifier(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "BatchDecryptProofProvided(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      cardCount?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): BatchDecryptProofProvidedEventFilter;
    BatchDecryptProofProvided(
      sender?: PromiseOrValue<string> | null,
      cardCount?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): BatchDecryptProofProvidedEventFilter;

    "Bet(address,uint256,uint256,uint256)"(
      player?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      betType?: PromiseOrValue<BigNumberish> | null,
      boardId?: null
    ): BetEventFilter;
    Bet(
      player?: PromiseOrValue<string> | null,
      amount?: PromiseOrValue<BigNumberish> | null,
      betType?: PromiseOrValue<BigNumberish> | null,
      boardId?: null
    ): BetEventFilter;

    "BoardCreated(address,uint256)"(
      creator?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): BoardCreatedEventFilter;
    BoardCreated(
      creator?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): BoardCreatedEventFilter;

    "ChipRequested(address,uint256)"(
      requester?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): ChipRequestedEventFilter;
    ChipRequested(
      requester?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): ChipRequestedEventFilter;

    "DeckShuffled(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): DeckShuffledEventFilter;
    DeckShuffled(
      player?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): DeckShuffledEventFilter;

    "DecryptProofProvided(address,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      cardIndex?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): DecryptProofProvidedEventFilter;
    DecryptProofProvided(
      sender?: PromiseOrValue<string> | null,
      cardIndex?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): DecryptProofProvidedEventFilter;

    "EvaluatorSet(address)"(
      evaluator?: PromiseOrValue<string> | null
    ): EvaluatorSetEventFilter;
    EvaluatorSet(
      evaluator?: PromiseOrValue<string> | null
    ): EvaluatorSetEventFilter;

    "GameStageChanged(uint8,uint256)"(
      stage?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): GameStageChangedEventFilter;
    GameStageChanged(
      stage?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): GameStageChangedEventFilter;

    "JoinedBoard(address,uint256)"(
      player?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): JoinedBoardEventFilter;
    JoinedBoard(
      player?: PromiseOrValue<string> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): JoinedBoardEventFilter;

    "NextPlayer(uint256,uint256)"(
      playerIndex?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): NextPlayerEventFilter;
    NextPlayer(
      playerIndex?: PromiseOrValue<BigNumberish> | null,
      boardId?: PromiseOrValue<BigNumberish> | null
    ): NextPlayerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "VerifierSet(address)"(
      verifier?: PromiseOrValue<string> | null
    ): VerifierSetEventFilter;
    VerifierSet(
      verifier?: PromiseOrValue<string> | null
    ): VerifierSetEventFilter;
  };

  estimateGas: {
    MIN_BIG_BLIND_SIZE(overrides?: CallOverrides): Promise<BigNumber>;

    MIN_PLAYERS(overrides?: CallOverrides): Promise<BigNumber>;

    amountToCall(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    amountToRaise(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    announceWinner(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    boards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    call(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    canCall(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canCheck(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canFold(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canRaise(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    check(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createBoard(
      requiredPlayers: PromiseOrValue<BigNumberish>,
      bigBlindSize: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fold(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBoard(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    globalPaused(overrides?: CallOverrides): Promise<BigNumber>;

    highestBet(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBetRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isRevealRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joinBoardWithPublicKey(
      pk: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pokerEvaluator(overrides?: CallOverrides): Promise<BigNumber>;

    provideDecryptProof(
      proofs: DecryptProofStruct[],
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raise(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    requestChip(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEvaluator(
      pokerEvaluator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    shuffleDeck(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    verifier(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MIN_BIG_BLIND_SIZE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MIN_PLAYERS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountToCall(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    amountToRaise(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    announceWinner(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    boards(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    call(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    canCall(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canCheck(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canFold(
      player: PromiseOrValue<string>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canRaise(
      player: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    check(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createBoard(
      requiredPlayers: PromiseOrValue<BigNumberish>,
      bigBlindSize: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fold(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBoard(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    globalPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highestBet(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBetRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isRevealRound(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinBoardWithPublicKey(
      pk: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerInfos(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pokerEvaluator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    provideDecryptProof(
      proofs: DecryptProofStruct[],
      cardIndexes: PromiseOrValue<BigNumberish>[],
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raise(
      amount: PromiseOrValue<BigNumberish>,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    requestChip(
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEvaluator(
      pokerEvaluator_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVerifier(
      verifier_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    shuffleDeck(
      proof: ShuffleProofStruct,
      boardId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    verifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
